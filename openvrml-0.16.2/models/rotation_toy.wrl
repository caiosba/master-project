#VRML V2.0 utf8

# SliderPot by Bob Crispen <crispen@hiwaay.net>
# Date:
#  12 December 1998
# Functionality:
#  Simulates a slider pot or volume fader on a mixing board: allows the
#  user to grab and move the slider and outputs a range of values which
#  can be used elsewhere in the world
# Parameters:
#  value_changed: the output value
#  scaleFactor:   output range is -scaleFactor..scaleFactor
#  centerDetent:  any value closer to 0 than abs(centerDetent) set to 0
#  initialValue:  sets slider and initial output value
# Notes: This pot is very small, designed for a HUD

PROTO SliderPot [
  eventOut SFFloat value_changed
  field    SFFloat scaleFactor 1.0
  field    SFFloat centerDetent 0.05
  field    SFFloat initialValue 0.0
]
{
  Transform {
    translation 0 0 -0.15
    scale 0.003 0.003 0.003
    children [
  
      # Bezel
      Shape {
	appearance Appearance {
	  material Material {
	    diffuseColor 0.85 0.85 0.1
	    specularColor 1 1 1
	    shininess 0.3
	  }
	}
	geometry IndexedFaceSet {
	  coord Coordinate {
	    point [
	      -1.5 -5 0, -0.25 -5 0, 0.25 -5 0, 1.5 -5 0,
	      -0.25 -4 0, 0.25 -4 0, -0.25 4 0, 0.25 4 0,
	      -1.5 5 0, -0.25 5 0, 0.25 5 0, 1.5 5 0
	    ]
	  }
	  coordIndex [
	    0 1 9 8 -1, 2 3 11 10 -1,
	    1 2 5 4 -1, 6 7 10 9 -1
	  ]
	}
      }
      DEF Handle Transform {
	children [
	  # A plane sensor is attached to the handle
	  DEF PS PlaneSensor {
	    maxPosition 0 4
	    minPosition 0 -4
	  }
	  Shape {
	    appearance Appearance {
	      material Material {
		diffuseColor 0.55 0.47 0.14
		specularColor 0.75 0.67 0.34
		shininess 0.3
	      }
	    }
	    geometry Box { }
	  }
	]
      }
      # Display
      Transform {
	translation 0 6 0
	children [
	  Shape {
	    appearance Appearance {
	      material Material {
		diffuseColor 1 1 1
	      }
	    }
	    geometry DEF Display Text {
	      string "0"
	      fontStyle FontStyle {
		family "SANS"
		style "BOLD"
		justify "MIDDLE"
		size 2
	      }
	    }
	  }
	]
      }
  
      DEF DisplayScript Script {
	eventIn  SFVec3f  set_translation
	eventOut MFString display_string
	eventOut SFVec3f  translation_changed
	eventOut SFFloat  value_changed IS value_changed
	field    SFFloat  scaleFactor IS scaleFactor
	field    SFFloat  centerDetent IS centerDetent
	field    SFFloat  initialValue IS initialValue
	field    SFFloat  val 0.0
	url [ "javascript:
	  // This is necessary because at the time the PROTO is initialized
	  // the event to the main world seems to get lost in Cosmo Player 2.1
	  function set_the_translation(value) {
	    val = value * 0.25 * scaleFactor;
	    if (Math.abs(val) < centerDetent)
	      val = 0.0;
	    if (val == 0) {
	      display_string[0] = val.toString();
	    } else if (val < 0) {
	      display_string[0] = val.toString().substring(0,5);
	    } else {
	      display_string[0] = val.toString().substring(0,4);
	    }
	    translation_changed = new SFVec3f(0, value, 0);
	  }
	  function set_translation(value) {
	    set_the_translation(value.y);
	    value_changed = val;
	  }
	  function initialize() {
	    set_translation(new SFVec3f(0, 4.0 * initialValue/scaleFactor, 0));
	  }
	"]
      }
  
    ]
    ROUTE PS.translation_changed TO DisplayScript.set_translation
    ROUTE DisplayScript.translation_changed TO Handle.set_translation
    ROUTE DisplayScript.display_string TO Display.set_string
  }
}

#
# Start of world
#
Group {
  children [

    WorldInfo {
      title "Rotation Toy"
      info  "by Bob Crispen
	     12 December 1998
	     Allows the user to set each of the values in a rotation field
	     and observe the results.
      "
    }

    Background {
      skyColor [ 0.2 0 0.3 ]
    }

    NavigationInfo {
      type [ "EXAMINE", "ANY" ]
      avatarSize [ 0.25, 1.8, 0.75 ]
      headlight FALSE
    }

    DEF MainViewpoint Viewpoint {
      position  0 0 10
      description "Entry View"
    }

    DEF UserPosition ProximitySensor {
      size 1.0e10 1.0e10 1.0e10
    }

    DEF HUD Transform {
      translation 0 0 10
      children [

	# The HUD looks more HUD-like if we light it separately
	DirectionalLight {
	  direction 0.3 -0.5 -0.5
	}

	#
	# Slider pots for each of the values
	#
	Transform {
	  translation -0.045 -0.045 0
	  children [
	    DEF Xpot SliderPot {}
	  ]
	}
	Transform {
	  translation -0.015 -0.045 0
	  children [
	    DEF Ypot SliderPot {
	      initialValue 1.0
	    }
	  ]
	}
	Transform {
	  translation 0.015 -0.045 0
	  children [
	    DEF Zpot SliderPot {}
	  ]
	}
	Transform {
	  translation 0.045 -0.045 0
	  children [
	    DEF Rpot SliderPot {
	      scaleFactor 3.14159
	      centerDetent 0.2
	    }
	  ]
	}

      ]
    }

    # Objects
    Group {
      children [
	DirectionalLight {
	  direction 0.3 -0.5 -0.5
	}
	DirectionalLight {
	  direction -0.3 -0.5 -0.5
	  intensity 0.7
	}

	# Axes
	Shape {
	  appearance Appearance {
	    material Material {
	      emissiveColor 0 0 1
	    }
	  }
	  geometry IndexedLineSet {
	    coord Coordinate {
	      point [ -4 0 0, 4 0 0, 0 -3 0, 0 3 0, 0 0 -4, 0 0 4 ]
	    }
	    coordIndex [ 0 1 -1, 2 3 -1, 4 5 -1 ]
	  }
	}

	# Axis labels
	Transform {
	  translation 4 0 0
	  children [
	    Billboard {
	      axisOfRotation 0 0 0
	      children [
		Shape {
		  appearance Appearance {
		    material Material { diffuseColor 0 0 1 }
		  }
		  geometry Text {
		    string "X"
		    fontStyle FontStyle {
		      family "SANS"
		      style "BOLD"
		      justify "MIDDLE"
		      size 0.5
		    }
		  }
		}
	      ]
	    }
	  ]
	}
	Transform {
	  translation 0 3 0
	  children [
	    Billboard {
	      axisOfRotation 0 0 0
	      children [
		Shape {
		  appearance Appearance {
		    material Material { diffuseColor 0 0 1 }
		  }
		  geometry Text {
		    string "Y"
		    fontStyle FontStyle {
		      family "SANS"
		      style "BOLD"
		      justify "MIDDLE"
		      size 0.5
		    }
		  }
		}
	      ]
	    }
	  ]
	}

# Because of the way Cosmo Player 2.1 handles Examine mode, this is
# commented out so that it doesn't try to rotate about the character 'Z'
#
#	Transform {
#	  translation 0 0 4
#	  children [
#	    Billboard {
#	      axisOfRotation 0 0 0
#	      children [
#		Shape {
#		  appearance Appearance {
#		    material Material { diffuseColor 0 0 1 }
#		  }
#		  geometry Text {
#		    string "Z"
#		    fontStyle FontStyle {
#		      family "SANS"
#		      style "BOLD"
#		      justify "MIDDLE"
#		      size 0.5
#		    }
#		  }
#		}
#	      ]
#	    }
#	  ]
#	}
	Transform {
	  translation -4 0 0
	  children [
	    Billboard {
	      axisOfRotation 0 0 0
	      children [
		Shape {
		  appearance Appearance {
		    material Material { diffuseColor 0 0 1 }
		  }
		  geometry Text {
		    string "-X"
		    fontStyle FontStyle {
		      family "SANS"
		      style "BOLD"
		      justify "MIDDLE"
		      size 0.5
		    }
		  }
		}
	      ]
	    }
	  ]
	}
	Transform {
	  translation 0 -3 0
	  children [
	    Billboard {
	      axisOfRotation 0 0 0
	      children [
		Shape {
		  appearance Appearance {
		    material Material { diffuseColor 0 0 1 }
		  }
		  geometry Text {
		    string "-Y"
		    fontStyle FontStyle {
		      family "SANS"
		      style "BOLD"
		      justify "MIDDLE"
		      size 0.5
		    }
		  }
		}
	      ]
	    }
	  ]
	}
	Transform {
	  translation 0 0 -4
	  children [
	    Billboard {
	      axisOfRotation 0 0 0
	      children [
		Shape {
		  appearance Appearance {
		    material Material { diffuseColor 0 0 1 }
		  }
		  geometry Text {
		    string "-Z"
		    fontStyle FontStyle {
		      family "SANS"
		      style "BOLD"
		      justify "MIDDLE"
		      size 0.5
		    }
		  }
		}
	      ]
	    }
	  ]
	}

	# Vector
	Transform {
	  scale 3 3 3
	  children [
	    Shape {
	      appearance Appearance {
		material Material {
		  emissiveColor 0 1 0
		}
	      }
	      geometry IndexedLineSet {
		coord DEF Vector Coordinate {
		  point [ 0 -1 0, 0 1 0 ]
		}
		coordIndex [ 0 1 -1 ]
	      }
	    }
	  ]
	}

	# Object
	DEF TheCone Transform {
	  scale 0.1 0.1 0.1
	  children [
	    Shape { 
	      appearance Appearance { 
		material Material { 
		  transparency 0
		  shininess 0
		} 
	      }
	      geometry IndexedFaceSet { 
		colorPerVertex TRUE
		coordIndex [ 
		  0, 1, 2, -1, 
		  0, 3, 1, -1, 
		  0, 2, 3, -1, 
		  1, 3, 2, -1, 
		] 
		coord DEF tetrahederon0_coord Coordinate { 
		  point [ 
		    0 20 0, 
		    0 -6.66667 18.8562, 
		    16.3299 -6.66667 -9.42809, 
		    -16.3299 -6.66667 -9.42809, 
		  ]
		}
		color DEF tetrahederon0_color Color { 
		  color [ 
		    0 0 0, 1 0 0, 0 1 0, 0 0 1
		  ]
		}
	      } 
	    } 
	  ]
	}

	# Construct an SFRotation from four Floats
	DEF ConstRotation Script {
	  eventIn  SFFloat setX
	  eventIn  SFFloat setY
	  eventIn  SFFloat setZ
	  eventIn  SFFloat setR
	  eventOut SFRotation rotation_changed
	  eventOut MFVec3f point_changed
	  field    SFRotation r 0 1 0 0
	  url ["javascript:
	    function setX(value) {
              var axis = r.getAxis();
              axis.x = value;
	      r.setAxis(axis.normalize());
	    }
	    function setY(value) {
              var axis = r.getAxis();
              axis.y = value;
	      r.setAxis(axis.normalize());
	    }
	    function setZ(value) {
              var axis = r.getAxis();
              axis.z = value;
	      r.setAxis(axis.normalize());
	    }
	    function setR(value) {
	      r.angle = value;
	    }
	    function eventsProcessed() {
	      rotation_changed = r;
	      point_changed = new MFVec3f (
		new SFVec3f(-r.x, -r.y, -r.z), new SFVec3f(r.x, r.y, r.z));
	      Browser.setDescription('rotation '+r.toString());
	    }
	  "]
	}
      ]
    }
  ]
  ROUTE Xpot.value_changed TO ConstRotation.setX
  ROUTE Ypot.value_changed TO ConstRotation.setY
  ROUTE Zpot.value_changed TO ConstRotation.setZ
  ROUTE Rpot.value_changed TO ConstRotation.setR
  ROUTE ConstRotation.rotation_changed TO TheCone.set_rotation
  ROUTE ConstRotation.point_changed TO Vector.set_point
  ROUTE UserPosition.position_changed TO HUD.set_translation
  ROUTE UserPosition.orientation_changed TO HUD.set_rotation
}
